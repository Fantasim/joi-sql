export default {
    noKeyInColumn: (i: number) => new Error(`error from tableToJSON: column key not detected on column line ${i}.`),
    columnTypeChangeForbidden: (column: string, table: string) => new Error(`Type change is not allowed in a non-empty table. column: ${column}, table: ${table}`),
    notNullBlocked: (column: string, table: string, count: number) => new Error(`You can't update the column '${column}' in '${table}' to a not nullable one (\`required()\`) because it contains ${count} rows with a NULL value. Please remove manually these NULL rows first, or set a default value. (\`default()\`)`),
    uniqueBlocked: (column: string, table: string, count: number) => new Error(`There are ${count} different combinations of duplication in the column '${column}' of the '${table}' table. Before adding a UNIQUE index (\`unique()\`) to this column, you need to remove manually all data duplication present in it.`),
    unsignedBlocked: (column: string, table: string, count: number) => new Error(`There are ${count} values below 0 in the column '${column}' of the '${table}' table. Please remove or update this rows before adding a unsigned type. (\`positive()\`)`),
    notNullAddBlocked: (column: string, table: string, count: number) => new Error(`You defined the column '${column}' of the table '${table}' as NOT NULLABLE (\`required()\`) but has no DEFAULT VALUE (\`default\`) or existing value in the ${count} present rows.`),
    foreignKeyDefaultValueDoesNotExist: (column: string, table: string, tableDest: string, dv: string) => new Error(`The default value: ${dv} of your foreign key '${column}' of the table '${table}' doesn't exist in the table ${tableDest}.`),
    stringMaxChangeBlocked: (column: string, table: string, count: number, max: number) => new Error(`There are ${count} strings in the column: ${column} of ${table} that contain a length bigger than the maximum length set in your schema: ${max}`),
    floatMaxChangeBlocked: (column: string, table: string, count: number, max: number) => new Error(`There are ${count} float values in the column ${column} of ${table} that contain a value bigger than the maximum allowed in your schema ${max} `),
    primaryNullBlocked: (column: string, table: string, count: number) => new Error(`You defined the column '${column}' of the table '${table}' as a primary key but this column contains ${count} rows assigned to NULL.`),
    primaryDuplicatesBlocked: (column: string, table: string, count: number) => new Error(`You defined the column '${column}' of the table '${table}' as a primary key but this column contains ${count} rows with different combinations of duplication.`),
}